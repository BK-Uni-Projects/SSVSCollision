set(FIND_SSVSCOLLISION_LIB_NAMES SSVSCollision libSSVSCollision ssvscollision libssvscollision)

set(FIND_SSVSCOLLISION_LIB_PATHS
  "${PROJECT_SOURCE_DIR}/../SSVSCollision/"
  "${PROJECT_SOURCE_DIR}/extlibs/SSVSCollision/"
  ${SSVSCOLLISION_ROOT}
  $ENV{SSVSCOLLISION_ROOT}
  ~/Library/Frameworks
  /Library/Frameworks
  /usr/local
  /usr/
  /sw/
  /opt/local
  /opt/csw
  /opt
)

FIND_PATH(SSVSCOLLISION_INCLUDE_DIR
  NAMES SSVSCollision/SSVSCollision.h
  PATH_SUFFIXES include/
  PATHS ${FIND_SSVSCOLLISION_LIB_PATHS}
)
MESSAGE("\nFound SSVSCollision include at: ${SSVSCOLLISION_INCLUDE_DIR}.\n")

FIND_LIBRARY(SSVSCOLLISION_LIBRARY_RELEASE
  NAMES ${FIND_SSVSCOLLISION_LIB_NAMES} ${FIND_SSVSCOLLISION_LIB_NAMES}-s
  PATH_SUFFIXES lib/ lib64/
  PATHS ${FIND_SSVSCOLLISION_LIB_PATHS}
)
MESSAGE("\nFound SSVSCollision release library at: ${SSVSCOLLISION_LIBRARY_RELEASE}.\n")

FIND_LIBRARY(SSVSCOLLISION_LIBRARY_DEBUG
  NAMES ${FIND_SSVSCOLLISION_LIB_NAMES}-d ${FIND_SSVSCOLLISION_LIB_NAMES}-s-d
  PATH_SUFFIXES lib/ lib64/
  PATHS ${FIND_SSVSCOLLISION_LIB_PATHS}
)
MESSAGE("\nFound SSVSCollision debug library at: ${SSVSCOLLISION_LIBRARY_DEBUG}.\n")

if(SSVSCOLLISION_LIBRARY_DEBUG OR SSVSCOLLISION_LIBRARY_RELEASE)
  set(SSVSCOLLISION_FOUND TRUE)
  if(SSVSCOLLISION_LIBRARY_DEBUG AND SSVSCOLLISION_LIBRARY_RELEASE)
    SET(SSVSCOLLISION_LIBRARY debug ${SSVSCOLLISION_LIBRARY_DEBUG} optimized ${SSVSCOLLISION_LIBRARY_RELEASE})
  endif()
  if(SSVSCOLLISION_LIBRARY_DEBUG AND NOT SSVSCOLLISION_LIBRARY_RELEASE)
    set(SSVSCOLLISION_LIBRARY_RELEASE ${SSVSCOLLISION_LIBRARY_DEBUG})
    set(SSVSCOLLISION_LIBRARY         ${SSVSCOLLISION_LIBRARY_DEBUG})
  endif()
  if(SSVSCOLLISION_LIBRARY_RELEASE AND NOT SSVSCOLLISION_LIBRARY_DEBUG)
    set(SSVSCOLLISION_LIBRARY_DEBUG ${SSVSCOLLISION_LIBRARY_RELEASE})
    set(SSVSCOLLISION_LIBRARY       ${SSVSCOLLISION_LIBRARY_RELEASE})
  endif()
else()
  set(SSVSCOLLISION_FOUND FALSE)
  set(SSVSCOLLISION_LIBRARY "")
endif()

IF(SSVSCOLLISION_FOUND)
  MESSAGE(STATUS "\nFound SSVSCOLLISION: ${SSVSCOLLISION_LIBRARY}\n")
ELSE()
  IF(SSVSCOLLISION_FIND_REQUIRED)
    MESSAGE(FATAL_ERROR "\nCould not find SSVSCollision library\n")
  ENDIF(SSVSCOLLISION_FIND_REQUIRED)
  set(SSVSCOLLISION_ROOT "" CACHE PATH "SSVSCollision top-level directory")
  message("\n-> SSVSCollision directory not found. Set SSVSCOLLISION_ROOT to SSVSCollision' top-level path (containing both \"include\" and \"lib\" directories).")
ENDIF()

MARK_AS_ADVANCED(
  SSVSCOLLISION_LIBRARY_DEBUG
  SSVSCOLLISION_LIBRARY_RELEASE
  SSVSCOLLISION_LIBRARY
  SSVSCOLLISION_INCLUDE_DIR
)
